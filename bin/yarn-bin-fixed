#!/usr/bin/env node

console.log(`running yarn-bin-fixed...`);

const p = require('path');
const fs = require('fs');
const _ = require('lodash');
const search = require('recursive-search');
const mkdirp = require('mkdirp');
const lnfs = require('lnfs');

const nodeModules = p.join(process.cwd(), 'node_modules');
const bin = p.join(nodeModules, '.bin');

function createBinFolder() {
  mkdirp.sync(bin);
}

function findAllPackageJsonsFiles() {
  return search.recursiveSearchSync('package.json', nodeModules);
}

function linkExecutables(packageJsonsFiles) {
  _.forEach(packageJsonsFiles, (pkgFile) => {
    if (fs.existsSync(pkgFile)) {
      try {
        const pkg = JSON.parse(fs.readFileSync(pkgFile));
        linkExecutablesFromPackage(pkgFile, pkg);
      } catch (e) {
        console.log(`can't parse ${pkgFile}`);
      }
    }
  });
}

function linkExecutablesFromPackage(pkgJsonFile, pkg) {
  _.forEach(pkg.bin, (pth, name) => {
    if (!_.isString(name)) {
      return;
    }

    const src = p.join(bin, name);
    const dst = p.resolve(p.dirname(pkgJsonFile), pth);
    if (!fs.existsSync(src)) {
      console.log(`linking ${src} -> ${dst}`);
      lnfs(dst, src);
    }
  });
}

function run() {
  createBinFolder();
  console.log(`bin dir is ${bin}`);
  const packageJsonsFiles = findAllPackageJsonsFiles();
  linkExecutables(packageJsonsFiles);
  console.log(`DONE`);
}

run();
